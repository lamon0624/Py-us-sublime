# git 是一套分散式版本控制系統，
# branch 分支！善用於版本控制!或者是測試新的特殊功能是否能 work ，假若沒有 bug 再 merge 回主 branch
# commit 提交節點！
# repository 倉儲！放置專案的地方
# ------------------------------------------------------------------------------------------------------
# 詳細教學 http://git-scm.com/book/zh
# ------------------------------------------------------------------------------------------------------
# git config --global user.name "name" //作者訊息
# git config --global user.email "email" //作者 e-mail
# git config --list //可以了解 git 設定內容
# ------------------------------------------------------------------------------------------------------
# cat ~/.gitconfig //觀看 git 的設定檔
# ------------------------------------------------------------------------------------------------------
# git config --global alias.st status //因為 git 提供 alias 功能，方便指令輸入
# git config --global apply.whitespace nowarn //去除 git 因為忽略空白而導致 ruby 產生差異的影響
# git config --global color.ui true //使 git 輸出改為彩色，方便閱讀
# ------------------------------------------------------------------------------------------------------
# 在 sublime 當中使用 ctrl + shift + p 再鍵入 git custom command 可以執行 git 指令，但無須加 git
# git status //可以觀看現在電腦檔案中與 git 內的差別，是否有為 modify 或 new 的檔案
# git add . //一次加入全部檔案
# 但是最好只單獨 add 要添加的檔案!讓自己能隨時能清楚檔案狀態! add 完的狀態叫 stage 反之則為 unstage
# git commit 提交節點到 github ，使用 -m 提交檔案訊息
#            -m "Add Messenge."
#            -am 等於合併 add 與 -m 兩階段
# 			 -v 列出更動的紀錄 +/- 各列新增與刪除的資訊
# git log 查看過去 commit 的紀錄
#         --stat 可以看到此 repository 下的詳盡的訊息
#         -p 可以看到檔案更詳細的變更內容
# 有些像是 log 檔希望能忽略他門，可以透過 .gitignore 內添加，來使 git 忽略追蹤
# git branch 可以觀看正在哪個 branch 上
# git branch cat 開新 branch
# gitk --all 可以觀看 Git GUI
# git checkout 切換 branch
# git rebase 類似 merge 但其為將最新 commit 的 branch 合併到此
# 假若開發的  branch 較多，最好先 rebase 後整理再合併回主幹，會比較漂亮的線圖
# ------------------------------------------------------------------------------------------------------
# 發生 confict 時的處理步驟
# 將發生 confict 的檔案打開，處理內容( 別忘了刪除<<<、===、>>> )。
# 使用 git add 將處理好的檔案加入 stage。
# 反覆步驟 1~2 直到所有 confict 處理完畢。
# git commit 提交合併訊息。 完成
# ------------------------------------------------------------------------------------------------------
# git reset HEAD <file> 將已加入的檔案取消 stage ，但基本上會另外將目前狀態保留
# git commit --amend 修改上一次 commit 時打錯的訊息
# 			 -soft 會將做過的修改加入 stage 當中
# 			 -hard 則是把做過的修改完全刪除
# ------------------------------------------------------------------------------------------------------
# 一定要參考的 Git 情境劇 http://blog.gogojimmy.net/2012/02/29/git-scenario/